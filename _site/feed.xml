<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-31T09:45:18+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jinlu Zhang</title><subtitle>My Website with Blogs, Publications, Projects and Resume...&gt;</subtitle><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><entry><title type="html">Pytorch显存充足出现CUDA error:out of memory错误</title><link href="http://localhost:4000/2020/08/16/pytorch-cuda-out-of-memory.html" rel="alternate" type="text/html" title="Pytorch显存充足出现CUDA error:out of memory错误" /><published>2020-08-16T00:00:00+08:00</published><updated>2020-08-16T00:00:00+08:00</updated><id>http://localhost:4000/2020/08/16/pytorch-cuda-out-of-memory</id><content type="html" xml:base="http://localhost:4000/2020/08/16/pytorch-cuda-out-of-memory.html">&lt;!--more--&gt;

&lt;h1 id=&quot;pytorch显存充足出现cuda-errorout-of-memory错误&quot;&gt;Pytorch显存充足出现CUDA error:out of memory错误&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ref:
&lt;a href=&quot;https://www.cnblogs.com/jisongxie/p/10276742.html&quot;&gt;https://www.cnblogs.com/jisongxie/p/10276742.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;RHzfn&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;报错内容&quot;&gt;报错内容&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1597653487139-4497bfd2-30ab-4733-86d9-64e769a2f690.png#align=left&amp;amp;display=inline&amp;amp;height=31&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=31&amp;amp;originWidth=414&amp;amp;size=9563&amp;amp;status=done&amp;amp;style=none&amp;amp;width=414&quot; alt=&quot;image.png&quot; /&gt;
&lt;a name=&quot;cHujo&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;bug描述&quot;&gt;Bug描述&lt;/h2&gt;
&lt;p&gt;显存充足，并且已经通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;torch.nn.DataParallel&lt;/code&gt; 指定GPU编号&lt;br /&gt;CUDA与CUDNN均无错误，NVIDIA驱动无错误
&lt;a name=&quot;VwWaK&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;以上情况很可能是是Tensorflow和pytorch冲突导致的，因为我发现当我同学在0号GPU上运行程序我就会出问题。&lt;br /&gt;详见pytorch官方论坛：&lt;br /&gt;&lt;a href=&quot;https://discuss.pytorch.org/t/gpu-is-not-utilized-while-occur-runtimeerror-cuda-runtime-error-out-of-memory-at/34780&quot;&gt;https://discuss.pytorch.org/t/gpu-is-not-utilized-while-occur-runtimeerror-cuda-runtime-error-out-of-memory-at/34780&lt;/a&gt;&lt;br /&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1597653932033-c9117000-4d24-4cc9-ab6d-35712afbacdb.png#align=left&amp;amp;display=inline&amp;amp;height=283&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=283&amp;amp;originWidth=756&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=756&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CUDA_VISIBLE_DEVICES&lt;/code&gt; 限制一下使用的GPU。&lt;br /&gt;比如有0,1,2,3号GPU，CUDA_VISIBLE_DEVICES=2,3，则当前进程的可见GPU只有物理上的2、3号GPU，此时它们的编号也对应变成了0、1，即cuda:0对应2号GPU，cuda:1对应3号GPU。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 使用python的os模块
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'CUDA_VISIBLE_DEVICES'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'2, 3'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 直接设置环境变量(linux系统)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CUDA_VISIBLE_DEVICES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2,3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="bug" /><summary type="html"></summary></entry><entry><title type="html">Ubuntu18.04-DL环境配置-驱动+新建用户+conda+Tensorflow/Pytorch</title><link href="http://localhost:4000/2020/05/25/Ubuntu-DL-configuration.html" rel="alternate" type="text/html" title="Ubuntu18.04-DL环境配置-驱动+新建用户+conda+Tensorflow/Pytorch" /><published>2020-05-25T00:00:00+08:00</published><updated>2020-05-25T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/25/Ubuntu-DL-configuration</id><content type="html" xml:base="http://localhost:4000/2020/05/25/Ubuntu-DL-configuration.html">&lt;!--more--&gt;

&lt;p&gt;&lt;a name=&quot;kT3br&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-检查驱动&quot;&gt;1. 检查驱动&lt;/h1&gt;
&lt;p&gt;使用 nvidia-smi 查看驱动，若没有cuda驱动，查阅&lt;a href=&quot;http://jinluzhang.site/2020/02/17/Ubuntu18.04-rebuild-Nvidia-driver-cuda-cudnn-multi-use-anaconda.html&quot;&gt;博客&lt;/a&gt;&lt;br /&gt;正常情况截图：&lt;br /&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590373061878-75120abc-07c6-4abe-aa7e-76f8314d1737.png#align=left&amp;amp;display=inline&amp;amp;height=97&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=79&amp;amp;originWidth=574&amp;amp;size=37232&amp;amp;status=done&amp;amp;style=none&amp;amp;width=708&quot; alt=&quot;image.png&quot; /&gt;
&lt;a name=&quot;Z0FWz&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-新建用户非必须&quot;&gt;2. 新建用户（非必须）&lt;/h1&gt;
&lt;p&gt;新建只能在控制台下登录的用户&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;切换为root用户为了获取创建用户的权限&lt;br /&gt;
peng@ubuntu:~$ sudo su&lt;/li&gt;
  &lt;li&gt;添加一个新用户（如用户名为csdn）&lt;br /&gt;
root@ubuntu:/home/peng# useradd zjl&lt;/li&gt;
  &lt;li&gt;为该用户设定登录密码&lt;br /&gt;
root@ubuntu:/home/peng# passwd zjl&lt;/li&gt;
  &lt;li&gt;为该用户指定命令解释程序（通常为/bin/bash）&lt;br /&gt;
root@ubuntu:/home/peng# usermod -s /bin/bash zjl&lt;/li&gt;
  &lt;li&gt;为该用户指定用户主目录&lt;br /&gt;
root@ubuntu:/home/peng# usermod -d /home/zjl zjl&lt;/li&gt;
  &lt;li&gt; 查看用户的属性&lt;br /&gt;
root@ubuntu:/home/peng# cat /etc/passwd&lt;br /&gt;
可以看到，已经存在csdn这个用户。/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：&lt;br /&gt;
用户名:口令:用户标识号:组标识号:注释性描述:用户主目录:命令解释程序&lt;/li&gt;
  &lt;li&gt;切换到用户zjl&lt;br /&gt;
root@ubuntu:/home/peng# su zjl&lt;br /&gt;
切换后可以看到登陆以后的用户csdn当前所在目录仍为“/home/peng”，即用户peng的主目录。&lt;br /&gt;
这种方式只能在控制台中互相切换用户，一旦重启系统，用该用户还是无法登陆（只能用原来的用户或root登陆）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a name=&quot;Jen1N&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-安装conda&quot;&gt;3. 安装conda&lt;/h1&gt;
&lt;p&gt;打开&lt;a href=&quot;https://docs.anaconda.com/anaconda/install/linux/&quot;&gt;https://docs.anaconda.com/anaconda/install/linux/&lt;/a&gt;&lt;br /&gt;找到自己想下载的&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh
bash Anaconda3-2020.02-Linux-x86_64.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;一路回车＋yes&lt;br /&gt;最后指定一个安装路径 /mnt/data3/home/zjl/software/anaconda3&lt;br /&gt;安装完成之后，激活conda base环境：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;/mnt/data3/home/zjl/software/anaconda3/bin/conda shell.bash hook&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;验证是成功安装：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;换源（非必须）
&lt;a name=&quot;kPBex&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-安装tensorflow-gpu-115&quot;&gt;4. 安装tensorflow-gpu 1.15&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;OpCVm&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1创建conda环境&quot;&gt;1.创建conda环境&lt;/h2&gt;
&lt;p&gt;通过调用下列命令，创建一个名为tfgpu的Conda环境：&lt;br /&gt;conda create -n tf1 pip python=3.6&lt;br /&gt;等待相应包的安装，如果国内网络太慢的话，可以为conda设置清华源，这样速度能快一点，具体配置过程，网上查一下吧，此处不再讲述。如果看到这样的提示，就证明conda环境创建成功。&lt;br /&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590376264090-1253539b-c099-4dc9-914a-2b8e95da9805.png#align=left&amp;amp;display=inline&amp;amp;height=409&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=409&amp;amp;originWidth=976&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=976&quot; alt=&quot;&quot; /&gt;
&lt;a name=&quot;XCIG9&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2激活环境&quot;&gt;2.激活环境&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通过以下命令激活conda环境：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate tf1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;这样就进入了刚创建的“tensorflow”环境。&lt;br /&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590376328965-450fc15f-7f0c-48b9-a829-ad236408e66d.png#align=left&amp;amp;display=inline&amp;amp;height=42&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=30&amp;amp;originWidth=309&amp;amp;size=2191&amp;amp;status=done&amp;amp;style=none&amp;amp;width=435&quot; alt=&quot;image.png&quot; /&gt;
&lt;a name=&quot;OFqrf&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;3安装tensorflow-gpu&quot;&gt;3.安装tensorflow-gpu&lt;/h2&gt;
&lt;p&gt;安装GPU版本的tensorflow需要输入以下命令：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tensorflow-gpu&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.15.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果只需要安装CPU版本的tensorflow则输入以下命令：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tensorflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.15.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590376514116-bdfe16db-cce0-43bc-9f0c-30d61f6eb183.png#align=left&amp;amp;display=inline&amp;amp;height=51&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=66&amp;amp;originWidth=1206&amp;amp;size=14325&amp;amp;status=done&amp;amp;style=none&amp;amp;width=941&quot; alt=&quot;image.png&quot; /&gt;&lt;br /&gt;finished!&lt;br /&gt;注意：务必注意一点，在安装完&lt;strong&gt;tensroflow后，由于我们是新创建的conda环境，该环境中基本上是空的，有很多包和IDE并没有安装进来，例如“Ipython”，“spyder”此时如果我们在该环境下打开spyder/Ipyton/jupyter notebook等，会发现其实IDE使用的kernel并不是新建立的这个环境的kernel，而是“base”这个环境的，而“base”环境中我们并没有安装tensorflow，所以一定无法import。这也就是为什么有很多人在安装好tensorflow后仍然在IDE里无法正常使用的原因了。&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;通过以下命令安装**Anaconda基础包&lt;br /&gt;conda install anaconda
&lt;a name=&quot;ASFxc&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-测试&quot;&gt;4. 测试&lt;/h2&gt;
&lt;p&gt;查看版本：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow as tf
tf.__version__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;查看是否使用GPU&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow as tf
tf.test.gpu_device_name()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590376568257-9b372a6a-0e81-4ad0-9530-3645b41fe245.png#align=left&amp;amp;display=inline&amp;amp;height=145&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=145&amp;amp;originWidth=463&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=463&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;查看在使用哪个GPU&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from tensorflow.python.client import device_lib
device_lib.list_local_devices()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590376567034-d90b9885-8d1d-4336-9d75-ea68d50eeeb1.png#align=left&amp;amp;display=inline&amp;amp;height=270&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=270&amp;amp;originWidth=800&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=800&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;9BEkm&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;5-安装tensorflow-gpu-200&quot;&gt;5. 安装tensorflow-gpu 2.0.0&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;ZLwUd&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1创建conda环境-1&quot;&gt;1.创建conda环境&lt;/h2&gt;
&lt;p&gt;通过调用下列命令，创建一个名为tfgpu的Conda环境：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; tf2 pip &lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;等待相应包的安装，如果国内网络太慢的话，可以为conda设置清华源，这样速度能快一点，具体配置过程，网上查一下吧，此处不再讲述。如果看到这样的提示，就证明conda环境创建成功。&lt;br /&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590376264090-1253539b-c099-4dc9-914a-2b8e95da9805.png#align=left&amp;amp;display=inline&amp;amp;height=409&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=409&amp;amp;originWidth=976&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=976&quot; alt=&quot;&quot; /&gt;
&lt;a name=&quot;Ab2KI&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2激活环境-1&quot;&gt;2.激活环境&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通过以下命令激活conda环境：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate tf2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;V7TmR&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;3安装tensorflow-gpu-1&quot;&gt;3.安装tensorflow-gpu&lt;/h2&gt;
&lt;p&gt;2.x版本GPU与CPU版本统一安装&lt;br /&gt;安装GPU版本的tensorflow需要输入以下命令：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tensorflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;2.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590377123019-5de69739-49a7-4c14-8f45-a68192a29baa.png#align=left&amp;amp;display=inline&amp;amp;height=50&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=99&amp;amp;originWidth=1199&amp;amp;size=21363&amp;amp;status=done&amp;amp;style=none&amp;amp;width=599.5&quot; alt=&quot;image.png&quot; /&gt;&lt;br /&gt;finished!
&lt;a name=&quot;UeH3o&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-测试-1&quot;&gt;4. 测试&lt;/h2&gt;
&lt;p&gt;查看版本：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow as tf
tf.__version__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;查看是否使用GPU&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow as tf
tf.test.gpu_device_name()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590376568257-9b372a6a-0e81-4ad0-9530-3645b41fe245.png#align=left&amp;amp;display=inline&amp;amp;height=145&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=145&amp;amp;originWidth=463&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=463&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;查看在使用哪个GPU&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from tensorflow.python.client import device_lib
device_lib.list_local_devices()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1590376567034-d90b9885-8d1d-4336-9d75-ea68d50eeeb1.png#align=left&amp;amp;display=inline&amp;amp;height=270&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;originHeight=270&amp;amp;originWidth=800&amp;amp;size=0&amp;amp;status=done&amp;amp;style=none&amp;amp;width=800&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;8OwgS&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;6-安装pytorch-131&quot;&gt;6. 安装pytorch 1.3.1&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;BlnAH&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1创建conda环境-2&quot;&gt;1.创建conda环境&lt;/h2&gt;
&lt;p&gt;通过调用下列命令，创建一个名为tfgpu的Conda环境：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda create &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; torch pip &lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;等待相应包的安装，如果国内网络太慢的话，可以为conda设置清华源，这样速度能快一点，具体配置过程，网上查一下吧，此处不再讲述。如果看到这样的提示，就证明conda环境创建成功。
&lt;a name=&quot;h5pJi&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2激活环境-2&quot;&gt;2.激活环境&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;通过以下命令激活conda环境：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda activate torch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;wWF7q&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;3安装torch&quot;&gt;3.安装torch&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pytorch.org/get-started/previous-versions/&quot;&gt;https://pytorch.org/get-started/previous-versions/&lt;/a&gt;&lt;br /&gt;2.x版本GPU与CPU版本统一安装&lt;br /&gt;安装GPU版本的tensorflow需要输入以下命令：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;1.5.0 &lt;span class=&quot;nv&quot;&gt;torchvision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;===&lt;/span&gt;0.6.0 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://download.pytorch.org/whl/torch_stable.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;finished!
&lt;a name=&quot;ssaUk&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-测试-2&quot;&gt;4. 测试&lt;/h2&gt;
&lt;p&gt;查看版本：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import torch
torch.__version__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from __future__ import print_function
import torch
x = torch.rand(5, 3)
print(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output should be something similar to:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tensor([[0.3380, 0.3845, 0.3217],
        [0.8337, 0.9050, 0.2650],
        [0.2979, 0.7141, 0.9069],
        [0.1449, 0.1132, 0.1375],
        [0.4675, 0.3947, 0.1426]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Additionally, to check if your GPU driver and CUDA is enabled and accessible by PyTorch, run the following commands to return whether or not the CUDA driver is enabled:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import torch
torch.cuda.is_available()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="configuration" /><summary type="html"></summary></entry><entry><title type="html">VideoPose3D</title><link href="http://localhost:4000/2020/05/05/VideoPose3D.html" rel="alternate" type="text/html" title="VideoPose3D" /><published>2020-05-05T00:00:00+08:00</published><updated>2020-05-05T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/05/VideoPose3D</id><content type="html" xml:base="http://localhost:4000/2020/05/05/VideoPose3D.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;3D human pose estimation in video with temporal convolutions and semi-supervised training&lt;/em&gt;
&lt;a href=&quot;https://arxiv.org/abs/1811.11742&quot;&gt;paper&lt;/a&gt;    &lt;a href=&quot;https://github.com/facebookresearch/VideoPose3D&quot;&gt;code&lt;/a&gt;    &lt;a href=&quot;https://dariopavllo.github.io/VideoPose3D/&quot;&gt;project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;summary&quot;&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。
&lt;!--more--&gt;&lt;/p&gt;
&lt;h1 id=&quot;problem-statement&quot;&gt;&lt;strong&gt;Problem Statement&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;3D poses in video，即从2D video中估计3D skeleton pose&lt;/p&gt;

&lt;h1 id=&quot;research-objective&quot;&gt;&lt;strong&gt;Research Objective&lt;/strong&gt;&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;First, we present a simple and efficient approach for 3D human pose estimation in video based on dilated temporal convolutions on 2D keypoint trajectories&lt;/li&gt;
    &lt;li&gt;Second, we introduce a semi-supervised approach which exploits unlabeled video, and is effective when labeled data is scarce.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;提出一种基于&lt;strong&gt;时序扩张卷积&lt;/strong&gt;的3D pose模型，在video的2D keypoint检测基础上得到3D pose，在保证准确率的同时比RNN-based方法更有效率(可以同步处理多个frame)；&lt;/p&gt;

&lt;p&gt;并提出一种&lt;strong&gt;半监督&lt;/strong&gt;方法，只要求相机参数&lt;/p&gt;

&lt;p&gt;不利用extra labeled data，达到SOTA&lt;/p&gt;

&lt;h1 id=&quot;method&quot;&gt;&lt;strong&gt;Method&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;网络结构&quot;&gt;网络结构&lt;/h2&gt;

&lt;p&gt;算法： VideoPose3D&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc5f85f0e-f537-4f60-8aab-7796191267d0%2FUntitled.png?table=block&amp;amp;id=70cae2df-97cc-447b-bffc-768d72b28384&amp;amp;width=1820&amp;amp;cache=v2&quot; alt=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c5f85f0e-f537-4f60-8aab-7796191267d0/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入为J个joints的二维坐标，在第一层进行3*3卷积（注意这里是dilation=1的扩张卷积），BN，ReLU和dropout，参数为kernel=3，output=1024，dropout=0.25。之后用4个 Res Block进行跳跃连接，slice中进行的是1D卷积。&lt;/p&gt;

&lt;h2 id=&quot;半监督方法&quot;&gt;半监督方法&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ffbdb4813-7de7-459e-bf44-48f880168078%2FUntitled.png?table=block&amp;amp;id=48d0f875-4655-4751-b50f-2b580a125d19&amp;amp;width=1150&amp;amp;cache=v2&quot; alt=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fbdb4813-7de7-459e-bf44-48f880168078/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;keypoint&quot;&gt;Keypoint&lt;/h1&gt;

&lt;h2 id=&quot;1-dilated-convolution&quot;&gt;1. Dilated Convolution&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ffef4549d-dec2-4f87-be08-84d6ee7a2161%2FUntitled.png?table=block&amp;amp;id=bbba0dbf-e752-426c-a564-f25e52083f72&amp;amp;width=1140&amp;amp;cache=v2&quot; alt=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fef4549d-dec2-4f87-be08-84d6ee7a2161/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-causal-convolutions&quot;&gt;2. Causal Convolutions&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F72aeb523-9d02-4cc8-8736-1aff8c3ed3c6%2FUntitled.png?table=block&amp;amp;id=948484e2-ec5b-416d-b2e3-254e84ccfc56&amp;amp;width=1130&amp;amp;cache=v2&quot; alt=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/72aeb523-9d02-4cc8-8736-1aff8c3ed3c6/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-semi-supervised-approach&quot;&gt;3. Semi-supervised approach&lt;/h2&gt;

&lt;h1 id=&quot;evaluation&quot;&gt;&lt;strong&gt;Evaluation&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;实验结果，作者如何评估自己的方法，实验的setup是什么样的，有没有问题或者可以借鉴的地方。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.notion.so/79dea96834824948bc2e2fd154bd7727&quot;&gt;实验结果&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/20200516143016.png&quot; alt=&quot;image-20200516142932438&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;notes&quot;&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/h1&gt;

&lt;h2 id=&quot;需改进的点&quot;&gt;需改进的点&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;直接卷积 2DPose 估计3D Pose 太粗暴&lt;/li&gt;
  &lt;li&gt;dilated conv尺度单一，不具有尺度不变性，对于too slow/too fast action不能很好的适应&lt;/li&gt;
  &lt;li&gt;遮挡问题没有解决&lt;/li&gt;
  &lt;li&gt;半监督方法中，没有很好的利用global position这个监督信息，只是回归了bone length loss&lt;/li&gt;
  &lt;li&gt;不如multi-view方法精准&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;reference&quot;&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="paper" /><category term="human_pose" /><summary type="html">3D human pose estimation in video with temporal convolutions and semi-supervised training paper code project Summary 写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。</summary></entry><entry><title type="html">如何进行科研选题</title><link href="http://localhost:4000/2020/05/04/%E9%80%89%E9%A2%98.html" rel="alternate" type="text/html" title="如何进行科研选题" /><published>2020-05-04T00:00:00+08:00</published><updated>2020-05-04T00:00:00+08:00</updated><id>http://localhost:4000/2020/05/04/%E9%80%89%E9%A2%98</id><content type="html" xml:base="http://localhost:4000/2020/05/04/%E9%80%89%E9%A2%98.html">&lt;!--more--&gt;
&lt;p&gt;&lt;em&gt;参考：https://sspai.com/post/57019&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-问题导向&quot;&gt;1. 问题导向&lt;/h1&gt;

&lt;p&gt;很多时候选一个好的topic要比选一个好的算法模型更为重要（从某一程度上来说），一般来说，选择topic要符合以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;新、难、热、实用至少占其一；&lt;/li&gt;
  &lt;li&gt;不要选择已经完全成熟的topic&lt;/li&gt;
  &lt;li&gt;不要选择和自己专业知识完全不相关的topic&lt;/li&gt;
  &lt;li&gt;交叉学科是一个可以考虑的选择，很多时候&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;合作者和导师对于选题极为重要，他们可以为你排掉很多坑，避免选错题、入错行&lt;/p&gt;

&lt;h1 id=&quot;2-文献导向&quot;&gt;2. &lt;strong&gt;文献导向&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.sspai.com/2019/10/16/8bbae8367cbe0bfbd05a06874fff180c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&quot; alt=&quot;https://cdn.sspai.com/2019/10/16/8bbae8367cbe0bfbd05a06874fff180c.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;很多老师会让学生从这里着手，去发现别人研究局限，然后通过突破这些局限，替别人把展望变成现实，从而做出属于自己的原创性研究。这个方式好不好？理论上是好的。论文结尾放这么一个部分，本意就是给后来人提供合适的路标和前进方向。&lt;/p&gt;

&lt;p&gt;然而，现实往往是复杂的。许多经验丰富的研究者对此心知肚明，却因为各种原因不愿意或者没有合适的办法告诉你。这就是科研的潜规则吧。&lt;/p&gt;

&lt;p&gt;现实世界中，那些「限制」、「展望」其实不是实在的路标，而是研究者们望洋兴叹的产物。他们就如同「笑傲江湖」里面的魔教长老一样，手持利斧开山数百丈。所不同的是他们并没有累死，而是停下来，告诉你「嗯，往这个方向走是没错的」。&lt;/p&gt;

&lt;p&gt;能解决的问题，原先的研究者肯定早已解决完了。谁会把容易解决的问题留着？积攒这些问题和存款不同，不会给你带来任何复利。&lt;/p&gt;

&lt;p&gt;更何况，审稿人哪里会对容易解决的遗留问题「高抬贵手」？肯定会穷追猛打，让作者反复磨合，真正解决了它们才肯善罢甘休。&lt;/p&gt;

&lt;p&gt;被审稿人和编辑放过的「未解决」问题，要么是非常难以攻克的问题，实在不便强人所难；要么是工作量很大的问题，完全可以自成一体，再写一篇文章。放心，当你有幸在期刊上读到正式发表论文的时候，后一篇文章原作者早已写完了。&lt;/p&gt;

&lt;p&gt;这里有 2 个考虑：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;好的文献绝不会给你留下容易解决的好线索；&lt;/li&gt;
  &lt;li&gt;你的思路会跟着这些走在「主流」上的大牛走，于是彻底钻到一个死胡同里面去。对于本来可以轻易发现的新线索，你会自动忽略它们。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这时候可能你会发现数十年前这个问题就有人做过了。不过不要沮丧，这不是大问题。&lt;/p&gt;

&lt;p&gt;这恰恰证明你的独立科研能力已经达到了（至少在当时）可以发表优秀期刊的水平。对于研究的初学者来说，这是一种非常积极的反馈。下面用你的经验去追寻新的问题和模型。如果你的模型和原作者有细微的区别，那就更好了。从这些差别中，可能会做出极其有价值的发现。&lt;/p&gt;

&lt;p&gt;另外一位学者，佐治亚理工的吴东军教授（D.J. Wu）提的办法就更有意思了。他的办法属于典型的看热闹不嫌事儿大——让经典文献 PK！&lt;/p&gt;

&lt;p&gt;文献都不是生物，怎么 PK？其实许多文献确实在打架。例如一篇文献 A 提出某观点。可能一段时间以后另一篇文献 B 用坚实的证据把该观点驳斥得体无完肤。&lt;/p&gt;

&lt;p&gt;人们就倾向于新的文献 B 观点，奉为圭臬。但是文献 A 当初是怎么从审稿人的手底下滑过去的？它想必是有合理和可取之处的。吴老师于是就从这样的文献间冲突出发，用更为全面的模型考虑在哪一种情况下，A 的论点依然会成立。从而对经典文献给予（有条件的）支持。&lt;/p&gt;

&lt;p&gt;由于文献 A 和 B 冲突的公案，他所作的研究意义和价值已经不言自明。因此这是一种非常聪明而有效的文献利用方法。&lt;/p&gt;

&lt;p&gt;发现、理解，而且还恰好能重新诠释经典文献冲突，听起来很美妙。然而，并非所有人都有这样的运气和毅力的。所以，为了发现问题，你还需要有其他的手段。例如本次暑期学校的主题——「数据」。&lt;/p&gt;

&lt;h1 id=&quot;34-方法导向&quot;&gt;34. &lt;strong&gt;方法导向&lt;/strong&gt;&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;To the one with a hammer, everything looks like a nail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;翻译过来，就是「当你手里拿着一把锤子的时候，看啥都像钉子」。&lt;/p&gt;

&lt;p&gt;如果你仅仅把论文当成是方法论课程的实践作业，那你很可能也会这么想，并且这么做。可是方法运用得再高妙，如果与你的研究问题不匹配，也是枉然。&lt;/p&gt;

&lt;p&gt;更何况许多人对方法只是一知半解。他们真正学会的只是鼓捣出一堆来源可疑的数据，然后扔到统计软件的绞肉机里面，等着漂亮的结果从另一端奔涌出来。&lt;/p&gt;

&lt;p&gt;天上真的能掉馅饼吗？不，你只会看到这样的结果。&lt;/p&gt;

&lt;p&gt;没错，垃圾进，垃圾出。因为你的逻辑可能是这样的一个三段论：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大前提：狗都有 4 条腿&lt;/li&gt;
  &lt;li&gt;小前提：我家的猫有 4 条腿&lt;/li&gt;
  &lt;li&gt;结论：我家的猫是一条狗&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你们可能觉得自己学过的东西更高级一些，不会犯这些毛病。例如学了爬虫，你就可以随心所欲找自己需要的研究数据了。根本无需去伪造数据，或者担心别人填写你的问卷的时候胡乱应付；学了 R，你就可以做出非常漂亮的回归分析结果和图表，甚至能处理时间序列；学了机器学习，你就可以让机器替你干脏活儿累活儿，帮你快速分析出决策树、做出词云，甚至是做文本情感分析与主题发现……&lt;/p&gt;

&lt;p&gt;但是，即便这样，也请你记住——&lt;strong&gt;不管多么时髦和高级的工具，也不应该成为你论文选题的起点&lt;/strong&gt;。把高中数学老师教给你的那一套「分析法思考，综合法证明」的小聪明暂时收起来。否则一叶障目，你就会丧失自己的起点。迷茫的结果就是做出了一大堆劳动成果，却没有解决任何值得解决的问题。&lt;/p&gt;

&lt;p&gt;选用了某种方法时，一定要问自己几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为什么要使用到这种方法？是因为自己熟悉吗？是因为别人不熟悉吗？&lt;/li&gt;
  &lt;li&gt;这个问题是否适合这种方法？有没有其他方法可以更好处理该问题，即便这个方法你并不熟悉？&lt;/li&gt;
  &lt;li&gt;你能获取到这种方法需要的数据吗？这些数据通过该方法的处理，能否产生你需要的形式？&lt;/li&gt;
  &lt;li&gt;选题、做题都是有机会成本的。把时间花费在值得的事物上。切记。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;研究要有目的。最重要目的是要解决一个具体或抽象的问题，而且这个问题还应该有价值和意义。&lt;/strong&gt;我这样说，不是让你停止学习研究方法。恰恰相反，方法不仅要学，还一定要多学。但是学过之后，&lt;strong&gt;要放弃「一定要应用某一方法」来做研究和写论文的执念。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anindya Ghose 说，只有你掌握的方法足够多了，工具箱里面有各种各样不同工具的时候，你才不会偏执于某一种方法，而是根据问题去筛选合适的解决途径。&lt;/p&gt;

&lt;p&gt;高斯（Anindya Ghose），印度裔美国学者。图片来自 &lt;a href=&quot;http://thinkers50.com&quot;&gt;thinkers50.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;方法导向看来对论文选题不合适。怎么办呢？很多人会抢答说「问题导向」啊。说的没错，但是仅仅说「问题导向」其实缺乏可操作性。问题从哪里来，该怎样寻找？&lt;/p&gt;

&lt;p&gt;通过和一流学者的交流，以及文献的阅读，我梳理出问题来源的以下常见类别：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;文献；&lt;/li&gt;
  &lt;li&gt;数据；&lt;/li&gt;
  &lt;li&gt;实践；&lt;/li&gt;
  &lt;li&gt;协同；&lt;/li&gt;
  &lt;li&gt;系统。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面我来当个导游，带你在不同的问题来源中游览一番。希望聪明的你可以掌握它们，并且找到适合自己的问题寻找途径。&lt;/p&gt;

&lt;p&gt;做研究、写论文需要读文献，这是常识。许多研究者会建议你从文献发现问题。这也是一种公认的传统智慧。&lt;/p&gt;

&lt;p&gt;被戏称为「洋八股」的文献研究，实际上是学者们跨越时空的对话。这种特殊的对话体例，不仅要求作者去梳理相关的历史文献脉络，还得在论文末尾标出来文章的限制和未来需要做的研究，即所谓「展望」。&lt;/p&gt;

&lt;h1 id=&quot;5-数据导向&quot;&gt;5. &lt;strong&gt;数据导向&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;如果你手里有好的独特数据，可以尝试从中获得选题。&lt;/p&gt;

&lt;p&gt;有位作者展示的是利用 Foursquare 数据对用户行为做预测的研究。我对该文章感兴趣，是因为我做隐私保护研究，很好奇用户的隐私是不是丝毫剩不下了。然而其他听众的兴趣点就在于独特的大规模数据获取。他们从教室一直追问到了路上，问论文作者是如何收集这些数据的。&lt;/p&gt;

&lt;p&gt;这位论文作者一下子有些紧张，讳莫如深。似乎害怕这份宝贵的数据很快就要被别人轻易夺走了一般。这种担心不无道理。大数据时代，数据是不缺的。但是真正有价值的数据，如同沙里淘金一般。&lt;/p&gt;

&lt;p&gt;专属的数据不是所有人都能搞到的。有位来自业界的老师，讲解如何和国家税务总局合作，利用发票数据来监控产能过剩问题。方法其实非常简单，只需要筛选出合适的特征就可以——他最后选择的是钢铁和煤炭。他们通过这种方式，不仅给全国企业画像，而且还通过某些指标特征，发现了其他有趣的结果。因为过于有趣，所以在修正的模型里面剔除掉了。&lt;/p&gt;

&lt;p&gt;你可能觉得很不服气——这样的问题你也有能力处理啊！问题是，你从哪里搞到如此大规模的专属数据呢？这个问题咱们后面会谈及。&lt;/p&gt;

&lt;p&gt;如果专属数据难以获取，你可以退而求其次，找开放数据。开放数据中，也有非常适合研究的类别，而且规模庞大。例如 Google 的 Correlate 和 Trends 数据，以及 Twitter 的 Firehose 开放数据等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.sspai.com/2019/10/16/b6388ec1bdfd09875d83d17181afb9ae.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&quot; alt=&quot;https://cdn.sspai.com/2019/10/16/b6388ec1bdfd09875d83d17181afb9ae.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是请注意，&lt;strong&gt;如果你利用开放数据做研究，速度是非常重要的&lt;/strong&gt;。这是个竞争激烈的领域，慢了就什么都落不下了。&lt;/p&gt;

&lt;p&gt;哈工大管理学院的叶院长，提到了自己研究里面曾经用过的百度数据。当时和 Google 的相应搜索数据进行比对研究，效果非常好。后来他们团队兴冲冲拿给百度的人看过。对方没说什么，回去就把数据下载的接口给关闭了。&lt;/p&gt;

&lt;p&gt;好在高价值开放数据，也不都是「不小心」流出来的结果。&lt;/p&gt;

&lt;p&gt;例如 Kaggle 上面总是有非常规整的数据集，可供你使用。如果你用得好，还能获得价值不菲的奖金。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.sspai.com/2019/10/16/2b0134cca80dc8ab41b4ff6751bec69f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&quot; alt=&quot;https://cdn.sspai.com/2019/10/16/2b0134cca80dc8ab41b4ff6751bec69f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;paper with code也是一个很好的网站，上面是基于github发布的各种论文源码，从上面的数据集的leaderboard中，可以从SOTA方法一直往下看，每篇论文也会被进行详细分类&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://paperswithcode.com/&quot;&gt;Papers with Code - The latest in machine learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f33fdc66-7691-4fa7-9908-f74ac1542f73/Untitled.png&quot; alt=&quot;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f33fdc66-7691-4fa7-9908-f74ac1542f73/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;6-实践导向&quot;&gt;&lt;strong&gt;6. 实践导向&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Hal Varian 教授认为不应该从文献里面找问题，而应该把时间花在看似不相干的报纸和杂志阅读上。他推荐的报刊杂志包括：《纽约时报》、《华尔街日报》、《经济学人》。&lt;/p&gt;

&lt;p&gt;他认为，对经济学研究者来说，读这些东西远远比看论文重要。因为它们会提到经济学家感兴趣的实际问题，可是分析过程有时漏洞百出。别人可能一笑置之，但是 Hal Varian 教授显然不会轻易放过这么好的选题机会。&lt;/p&gt;

&lt;p&gt;其实，这就像是在讨论区里面和别人争论。如果你翻来覆去只会说一些大家都知道的内容，没有人会觉得感兴趣。而如果你你能够不断从外界获得新的灵感、信息和见识，那讲出来的内容就可以更轻易地抓住别人的注意力。&lt;/p&gt;

&lt;p&gt;除了这些报刊杂志之外，学者们还提到了两个很好的实践问题来源。&lt;/p&gt;

&lt;p&gt;第一个就是&lt;strong&gt;业界咨询工作&lt;/strong&gt;。许多好的学者，例如 Anindya Ghose 和 Paul Pavlou 等，都是两条腿走路。一条腿在学术界攀登，另一条在企业界做咨询。&lt;/p&gt;

&lt;p&gt;咨询，是一定要解决问题的。所以，不用你找，问题自己就找上门来。&lt;/p&gt;

&lt;p&gt;在大数据时代，做咨询必然要接触到许多企业数据。例如 Ghose 拿到了好几家知名的企业做数字广告的效果数据。这些数据不仅数量庞大，而且结构化完整、真实性高，是让你的研究获得竞争优势的重要源泉。&lt;/p&gt;

&lt;p&gt;与企业合作，是一种双赢之道。在这个社会上，一定要学会互惠合作。不要尝试做伸手党。&lt;/p&gt;

&lt;p&gt;许多老师和研究生都觉得，拿数据是一件非常困难的事情——那些大公司根本就不愿意分享数据给你。没错，但是你没有看到硬币的另一面。他们其实特别乐意分享数据，只要你的分析能力比他们还高，能给他们更有价值的洞见。&lt;/p&gt;

&lt;p&gt;包括中国移动在内的许多中国大型国有企业都对 Ghose 这样的顶级学者敞开大门、张开双臂，热烈欢迎。&lt;/p&gt;

&lt;p&gt;同样的数据，在不擅于分析的人手中，一文不值；到了会分析的人那里，就可以挖掘出不菲的价值。这是个「数（据）中自有黄金屋」的年代。企业解决了实际问题，获得了经济回报；你完成了研究，发表了高水平论文。这便是双赢之道。&lt;/p&gt;

&lt;p&gt;可是你作为一个初级研究者，还远远没有那样的积累。大企业还是会把你拒之门外，怎么办呢？&lt;/p&gt;

&lt;p&gt;从小处做起，深入进去，帮中小企业解决具体的问题。&lt;/p&gt;

&lt;p&gt;我在 MSU 访学的时候，讲授管理信息系统课的 Kizzier 教授，就把学生撒出去到 main street 上挨个儿敲门，帮助企业发现目前系统存在哪些不足，并且想方设法加以改进。学生上课的时候分享这些案例，可以充分体现出「实践出真知」的意义。&lt;/p&gt;

&lt;p&gt;获取实践问题的另一种方式是&lt;strong&gt;读案例&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;前面提到的佐治亚理工吴教授，就让自己的学生去读哈佛案例库，从里面寻找问题。一个企业案例，能进入哈佛的案例库是非常不容易的。经过层层筛选的经典案例往往代表了业界实践中非常典型的问题。&lt;/p&gt;

&lt;p&gt;清华大学宁向东教授讲，他在哈佛读经理培训班的时候，根本就没有教材。每天接触的全都是案例。在哈佛商学院教授派珀看来，「商业世界只有问题，没有理论」。通过读案例，可以让学生找到「想问题的感觉」。&lt;/p&gt;

&lt;p&gt;所以你看，一个这么经典而庞大的问题库，与实践结合紧密，理论却缺位。这难道不刚好是研究者们的好机会吗？&lt;/p&gt;

&lt;p&gt;然而，据吴教授说，他的博士生里面，愿意听他话的，寥寥无几。有个叫黄涛的听了他的话，真的跑去读案例，于是成了他最为得意的学生。发展得非常好。&lt;/p&gt;

&lt;p&gt;看来，听老师的话，有时候也是对的。是吧？&lt;/p&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="research" /><summary type="html"></summary></entry><entry><title type="html">博客网站无法显示CDN图片，403报错</title><link href="http://localhost:4000/2020/04/25/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BACDN%E5%9B%BE%E7%89%87-403%E6%8A%A5%E9%94%99.html" rel="alternate" type="text/html" title="博客网站无法显示CDN图片，403报错" /><published>2020-04-25T00:00:00+08:00</published><updated>2020-04-25T00:00:00+08:00</updated><id>http://localhost:4000/2020/04/25/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BACDN%E5%9B%BE%E7%89%87,403%E6%8A%A5%E9%94%99</id><content type="html" xml:base="http://localhost:4000/2020/04/25/%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BACDN%E5%9B%BE%E7%89%87-403%E6%8A%A5%E9%94%99.html">&lt;h2 id=&quot;bug描述&quot;&gt;Bug描述&lt;/h2&gt;
&lt;p&gt;博客网站无法显示CDN图片（图片来自语雀，格式为&lt;a href=&quot;https://cdn.nlark.com/yuque/&quot;&gt;https://cdn.nlark.com/yuque/&lt;/a&gt;······）
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2 id=&quot;报错内容&quot;&gt;报错内容&lt;/h2&gt;
&lt;p&gt;Chrome控制台报错：
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Failed to load resource: the server responded with a status of 403&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;
&lt;p&gt;在HTML页面添加代码：&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;referrer&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no-referrer&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;成功解决👇
&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1587795759962-0ce6433d-d143-4062-9545-1b55cf102029.png#align=left&amp;amp;display=inline&amp;amp;height=419&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=837&amp;amp;originWidth=901&amp;amp;size=301133&amp;amp;status=done&amp;amp;style=none&amp;amp;width=451&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="bug" /><summary type="html">Bug描述 博客网站无法显示CDN图片（图片来自语雀，格式为https://cdn.nlark.com/yuque/······）</summary></entry><entry><title type="html">RMPE Regional Multi-person Pose Estimation</title><link href="http://localhost:4000/2020/04/24/RMPE_-Regional-Multi-person-Pose-Estimation.html" rel="alternate" type="text/html" title="RMPE Regional Multi-person Pose Estimation" /><published>2020-04-24T00:00:00+08:00</published><updated>2020-04-24T00:00:00+08:00</updated><id>http://localhost:4000/2020/04/24/RMPE_%20Regional%20Multi-person%20Pose%20Estimation</id><content type="html" xml:base="http://localhost:4000/2020/04/24/RMPE_-Regional-Multi-person-Pose-Estimation.html">&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1612.00137v3&quot;&gt;paper&lt;/a&gt;	&lt;a href=&quot;https://github.com/MVIG-SJTU/AlphaPose/tree/pytorch&quot;&gt;code&lt;/a&gt;
&lt;a name=&quot;Summary&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;这篇论文是上海交大和腾讯优图的论文，被 ICCV 2017接收。它对于多人姿态估计的方法采用传统的自顶向下的方法，即先检测人，再识别人体姿态。检测使用的是SSD-512，识别人体姿态使用的是state-of-the-art的Stacked Hourglass方法。&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;9df44c92&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h2&gt;
&lt;p&gt;论文分析了当前姿态估计的两种方法存在的问题——&lt;strong&gt;对于自顶向下的方法，检测的误差是很大的一个影响，即使在检测任务下是正确的，提取的proposal也不适用于单人的姿态估计方法；同时，冗余的检测框也使得单人的姿态被重复估计；对于自底向上的方法，当两个人比较靠近时，人体关键点分配到每个人身上会出错，这也是该方法的challenge。&lt;/strong&gt;作者采用自顶向下方法，致力于解决对于imperfect proposal，通过调整，使得crop的person能够被单人姿态估计方法很好的识别，从而克服检测带来的定位误差。
&lt;a name=&quot;d00860d5&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;research-objective&quot;&gt;Research Objective&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;2D多人姿态估计自顶向下方法&lt;/strong&gt;。致力于解决对于imperfect proposal，通过调整，使得crop的person能够被单人姿态估计方法很好的识别，从而克服检测带来的定位误差。
&lt;a name=&quot;c9a0d983&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;methods&quot;&gt;Method(s)&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1587787928991-fa7b3df7-5f86-4a44-8ee2-d237e2363079.png#align=left&amp;amp;display=inline&amp;amp;height=161&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=214&amp;amp;originWidth=787&amp;amp;size=124562&amp;amp;status=done&amp;amp;style=none&amp;amp;width=590&quot; alt=&quot;image.png&quot; /&gt;&lt;br /&gt;整个过程分为3步：&lt;br /&gt;&lt;strong&gt;第一步&lt;/strong&gt;是用SSD检测人，获得human proposal&lt;br /&gt;&lt;strong&gt;第二步&lt;/strong&gt;是将proposal输入到两个并行的分支里面，上面的分支是STN+SPPE+SDTN的结构，即Spatial Transformer Networks + Single Person Pose Estimation + Spatial de- Transformer Networks，STN接收的是human proposal，SDTN产生的是pose proposal。下面并行的分支充当额外的正则化矫正器。&lt;br /&gt;&lt;strong&gt;第三步&lt;/strong&gt;是对pose proposal做Pose NMS（非最大值抑制），用来消除冗余的pose proposal。
&lt;a name=&quot;4gJFX&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;方法细节&quot;&gt;方法细节&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Symmetric STN + SPPE + SDTN&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1587787964046-5e3fa8ee-b511-4f38-b4cd-7ee37c5be833.png#align=left&amp;amp;display=inline&amp;amp;height=279&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=288&amp;amp;originWidth=771&amp;amp;size=138412&amp;amp;status=done&amp;amp;style=none&amp;amp;width=746&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;STN： 得到更精准的单人模型&lt;/li&gt;
  &lt;li&gt;SDTN：反向变换，还原原图，并产生候选姿态&lt;/li&gt;
  &lt;li&gt;SPPE：生成各种姿态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;1.将上一步得出的human proposal在长宽方向上个延长20%，以确保可以把人完整的框起来。而且经过验证，这样确实可以把大部分的人整个框起来。&lt;br /&gt;2.经过一个STN网络将延伸过的图像进行仿射变换，可以生成一个比较精确的、适合作为SPPE输入。&lt;br /&gt;3.把SPPE的输出经过与前边相反的STN变换，将坐标变换回原来的坐标系，完成整个的识别过程。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Symmetric STN&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;STN是Google DeepMind在2015年提出的Spatial Transformer Networks，相当于在传统的一层Convolution中间，装了一个“插件”（就是矩阵的仿射变换），可以使得传统的卷积带有了裁剪、平移、缩放、旋转等特性；目标是可以减少CNN的训练数据量，以及减少做data argument，让CNN自己学会数据的形状变换，将输入图像做任意空间变换。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Parallel SPPE&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并行的SPPE作为正则化作用，用来进一步&lt;strong&gt;加强STN提取优质的human proposal&lt;/strong&gt;。这一支的label设置为single person pose。训练时使用2条支路输出的总误差来训练网络，parallel SPPE&lt;strong&gt;所有层参数在训练阶段是固定的&lt;/strong&gt;，Parallel SPPE分支和真实姿态的标注进行比较，反向传播中心位置的姿态误差给STN模块。如果STN的姿态不是中心定位，parallel SPPE反向传播较大的误差。通过反向传播的方式&lt;strong&gt;帮助STN聚焦正确的区域&lt;/strong&gt;，实现提取高质量人体区域。但是测试阶段，parallel SPPE被禁止。在测试时将下面的 Parallel SPPE丢掉，只使用Symmetric STN进行前向传播。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Parametric Pose NMS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先选择置信度最高的pose作为参考，靠近它的pose通过淘汰标准来消除。对于剩下的pose，重复上述过程，直到消除冗余姿势，并且仅返回唯一的pose。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pose-guided Proposals Generator&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;symmetric STN + SPPE应该用SSD产生的人体建议框充分训练，需要适当的数据增强。这里主要是在训练过程中增加proposal的数量，虽然每一张图片都只有K个人，每个人只会产生一个bbox，但是可以根据ground truth的proposals，生成和其分布相同的多个proposals一起训练。
&lt;a name=&quot;Evaluation&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;evaluation&quot;&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2020/png/602350/1587787984452-7bc29258-9851-4396-b4e0-0f2f7dc0cdae.png#align=left&amp;amp;display=inline&amp;amp;height=249&amp;amp;margin=%5Bobject%20Object%5D&amp;amp;name=image.png&amp;amp;originHeight=332&amp;amp;originWidth=594&amp;amp;size=263937&amp;amp;status=done&amp;amp;style=none&amp;amp;width=446&quot; alt=&quot;image.png&quot; /&gt;
&lt;a name=&quot;Conclusion&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;wait&lt;/p&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="paper" /><category term="human_pose" /><summary type="html">paper code Summary 这篇论文是上海交大和腾讯优图的论文，被 ICCV 2017接收。它对于多人姿态估计的方法采用传统的自顶向下的方法，即先检测人，再识别人体姿态。检测使用的是SSD-512，识别人体姿态使用的是state-of-the-art的Stacked Hourglass方法。</summary></entry><entry><title type="html">Human Pose综述</title><link href="http://localhost:4000/2020/04/03/human-pose-review.html" rel="alternate" type="text/html" title="Human Pose综述" /><published>2020-04-03T00:00:00+08:00</published><updated>2020-04-03T00:00:00+08:00</updated><id>http://localhost:4000/2020/04/03/human-pose-review</id><content type="html" xml:base="http://localhost:4000/2020/04/03/human-pose-review.html">&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/20200321094012.png&quot; alt=&quot;http://jinluzhang.site/PublicPic/Pic/20200321094012.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出这四个部分都是与人体姿态有关的，也是姿态估计的具体分支&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;姿态识别&quot;&gt;姿态识别&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;姿态识别一般流程如下：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jinluzhang.site/PublicPic/Pic/20200320172220.png&quot; alt=&quot;http://jinluzhang.site/PublicPic/Pic/20200320172220.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出人体分割与人体姿态识别是姿态识别大类的两个关键步骤，人体分割是人体姿态识别（动作识别、身份识别等）的基础。&lt;/p&gt;

&lt;h3 id=&quot;人体分割-人体骨骼关键点检测skeleton&quot;&gt;人体分割-人体骨骼关键点检测（skeleton）&lt;/h3&gt;

&lt;p&gt;人体分割使用的方法可以大体分为人体骨骼关键点检测、语义分割等方式实现。人体骨骼关键点检测输出是人体的骨架信息，一般主要作为&lt;strong&gt;人体姿态识别的基础部分&lt;/strong&gt;，主要用于分割、对齐等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jinluzhang.site/PublicPic/Pic/20200321094432.png&quot; alt=&quot;http://jinluzhang.site/PublicPic/Pic/20200321094432.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;人体骨骼关键点检测是一种多方面任务，包含了目标检测、人体骨骼关键点检测、分割等。&lt;/p&gt;

&lt;p&gt;人体骨骼关键点检测可以分为二维（2D）和三维（3D）的人体骨骼关键点检测；&lt;/p&gt;

&lt;p&gt;按照检测的方法又能分为自底向上、自顶向下两个方式&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人体骨骼关键点检测的挑战：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;每张图片中包含人的数量是未知的，图像中人越多，计算复杂度越大（计算量与人的数量正相关），这使得处理时间变长，从而使real time变得困难。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;人与人之间会存在如接触、遮挡等关系，导致将不同人的关键节点区分出来的难度增加，有可能会将骨骼关键点误认为是另一个人的。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;关键点区域的图像信息比较难区分，也就是说某个关键点检测时容易出现检测位置不准或者置信度不准，甚至将背景的图像当成关键点图像的错误。&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;人体不同关键点检测的难易程度是不一样的，对于腰部、腿部这类没有比较明显特征关键点的检测要难于头部附近关键点的检测，需要对不同的关键点区别对待。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2d人体骨骼关键点检测实现&quot;&gt;&lt;strong&gt;2D人体骨骼关键点检测实现&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JinluZhang1126/PublicPic/master/Pic/image-20200321115712607-1584763108036.png&quot; alt=&quot;https://raw.githubusercontent.com/JinluZhang1126/PublicPic/master/Pic/image-20200321115712607-1584763108036.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jinluzhang.site/PublicPic/Pic/640.jpg&quot; alt=&quot;http://jinluzhang.site/PublicPic/Pic/640.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;代表作：&lt;/p&gt;

&lt;p&gt;自顶向下：RMPE （AlphaPose） https://arxiv.org/abs/1612.00137v3&lt;/p&gt;

&lt;p&gt;自底向上：PAFs（OpenPose） https://arxiv.org/abs/1611.08050&lt;/p&gt;

&lt;h3 id=&quot;2d人体骨骼关键点检测实现-1&quot;&gt;&lt;strong&gt;2D+人体骨骼关键点检测实现&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;实质是：2D图像+3D重建&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2D+人体骨骼关键点检测多使用3D重建的方法，一般输入都是RGB的2D图像数据，首先使用2D人体骨骼关键点检测的方法检测出2D的人体骨骼关键点后，再使用3D重建的方式，将2D的关键点信息转到3D的空间中，输出的就是3维人体骨骼关键点信息。这种方法使用的图像数据不是真的3D数据，&lt;strong&gt;输出的3维的信息主要是通过2D到3D重建的方式实现的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;2D+人体骨骼关键点检测输出的人体骨骼关键点信息是3D数据，即每个关节都是一个3D坐标（x,y,z）&lt;/p&gt;

&lt;p&gt;http://jinluzhang.site/PublicPic/Pic/640-1584764809340.webp&lt;/p&gt;

&lt;p&gt;代表作：DensePose https://arxiv.org/abs/1802.00434&lt;/p&gt;

&lt;h3 id=&quot;3d人体骨骼关键点检测&quot;&gt;&lt;strong&gt;3D人体骨骼关键点检测：&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;根据输入图像数据是RGB还是RGBD可分为2D+人体骨骼关键点检测、3D人体骨骼关键点检测。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JinluZhang1126/PublicPic/master/Pic/image-20200321115912509.png&quot; alt=&quot;https://raw.githubusercontent.com/JinluZhang1126/PublicPic/master/Pic/image-20200321115912509.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;输入的图像数据：RGBD（3D）&lt;/p&gt;

&lt;p&gt;Depth Image实际上也是一幅真实的3D图像数据，Depth Image包含了深度信息、图像的高宽信息。CNN+RNN是目前的主流方法。&lt;/p&gt;

&lt;h3 id=&quot;人体姿态识别&quot;&gt;人体姿态识别&lt;/h3&gt;

&lt;p&gt;人体姿态识别包括动作识别、身份识别两个方面，关键在人体特征提取，人体特征提取主要完成动作特征提取、身份特征提取。&lt;/p&gt;

&lt;h3 id=&quot;动作识别&quot;&gt;动作识别&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://jinluzhang.site/PublicPic/Pic/20200320172906.png&quot; alt=&quot;http://jinluzhang.site/PublicPic/Pic/20200320172906.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;身份识别&quot;&gt;身份识别&lt;/h3&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="human_pose" /><category term="paper" /><summary type="html">可以看出这四个部分都是与人体姿态有关的，也是姿态估计的具体分支</summary></entry><entry><title type="html">如何高效地进行文献阅读和总结？</title><link href="http://localhost:4000/2020/03/28/how-to-read-papers.html" rel="alternate" type="text/html" title="如何高效地进行文献阅读和总结？" /><published>2020-03-28T00:00:00+08:00</published><updated>2020-03-28T00:00:00+08:00</updated><id>http://localhost:4000/2020/03/28/how-to-read-papers</id><content type="html" xml:base="http://localhost:4000/2020/03/28/how-to-read-papers.html">&lt;!--more--&gt;
&lt;p&gt;&lt;em&gt;最近这段时间看论文看到的头疼，相信很多第一次忙毕业论文或者研究课题的同学都深有体会，我总结一些自己阅读文献的经验和总结方法，不足之处还请多多指教。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;为什么进行文献阅读&quot;&gt;为什么进行文献阅读？&lt;/h2&gt;

&lt;p&gt;知乎一个回答让我觉得很有意思，原文如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;不断涌现的论文，其实就是学术界的升级安装包。你不断读论文，就是为了跟学术共同体&lt;strong&gt;保持同步&lt;/strong&gt;。但是，只有你跟这篇论文所&lt;strong&gt;依赖&lt;/strong&gt;的那些基础知识同步以后，安装这个升级包才有意义，也才能水到渠成。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;个人认为，论文就是研究者的presentation，能够以最严谨、简洁、客观（仅限于高水平文献）展示自己的idea，读最新的文献是为了掌握最新的学术动态，读经典文献是为了对领域的发展和基础有更深的了解。所有的论文都要站在前人的肩膀上再进一步，凭空捏造一个全新的成果不可靠，也不现实，所以读文献，是所有研究者必经之路。&lt;/p&gt;

&lt;h2 id=&quot;如何选择文献&quot;&gt;如何选择文献&lt;/h2&gt;

&lt;p&gt;关于文献的搜索和整理以及相关工具的使用，有时间我会单独写一篇笔记，这里着重介绍一些大佬还有我个人如何进行选择文献和筛选的。&lt;/p&gt;

&lt;h3 id=&quot;1-通过综述入门&quot;&gt;1. 通过综述入门&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;原则：读综述以读全为目的，1-2篇足矣&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很多人推荐直接阅读最新的文献，我认为如果有充足的时间，可以先读该领域的综述，最好是最近三年的综述，可以更好地认识该领域：包括经典方法、最新的热点、研究趋势、技术难点等，读文献综述可以知道&lt;strong&gt;已经做出了什么成果，还需要做什么事情，哪些问题没有解决&lt;/strong&gt;。综述多为该领域的资深人士编写，视角更宽广，可以提高可言的视野和思路，读一两篇综述，就可以对该领域有个大致了解。查找方法可以直接通过&lt;a href=&quot;https://scholar.google.com/&quot;&gt;Google Scholor&lt;/a&gt;或者&lt;a href=&quot;webofknowledge.com&quot;&gt;Web of Science&lt;/a&gt;上进行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Survey/Review+&amp;lt;领域&amp;gt;&lt;/code&gt;的检索。(免费用学校购买的版权看paper真的是爽:satisfied:)&lt;/p&gt;

&lt;h3 id=&quot;2-定位细分领域与相关文献&quot;&gt;2. 定位细分领域与相关文献&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;原则：读新、读典&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最新的好论文才能代表最近的研究趋势和研究热点，入门阶段不宜不要过多沉溺于十年前的作品（经典除外）&lt;/p&gt;

&lt;p&gt;通过综述锁定自己想做的某一个细分问题，以姿态估计为例，包括skeleton检测、动作识别、2D pose、3D pose、2D+ Pose等细分领域，确定该细分领域后，可以先通过综述中提到的reference下手，把他们先找全，往往这些方法都是SOTA或者经典方法，再根据他们论文中提到的文献，进行筛选、汇总。这部分工作一般需要先阅读一部分论文，才能有分辨能力的进一步筛选文献。&lt;/p&gt;

&lt;p&gt;还有一种方法，可以直接找到领域内顶级期刊、会议的整理，直接筛选最近两三年的相关领域论文，这种方法比较费力，但是可以很快速的阅读到最新的论文。&lt;/p&gt;

&lt;p&gt;一般筛选25-40篇就可以开始系统地阅读了，不要只忙于筛选搜集而后束之高阁，那样毫无意义。&lt;/p&gt;

&lt;h3 id=&quot;3读人读组&quot;&gt;3.读人，读组&lt;/h3&gt;

&lt;p&gt;这个是建立在对该领域有一定了解的基础上，读得多了，参加的讨论多了，自然就知道该领域哪些大佬，哪些group有杰出的工作。可以谷歌他们的个人网站或者通过Google scholar搜索大佬的作品，挑选着读。&lt;/p&gt;

&lt;h2 id=&quot;如何阅读&quot;&gt;如何阅读&lt;/h2&gt;

&lt;h3 id=&quot;文献文章结构&quot;&gt;文献文章结构&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://jinluzhang.site/PublicPic/Pic/image-20200328174957659.png&quot; alt=&quot;image-20200328174957659&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一般来说文章的大体结构是如上所示，有了结构才有读论文的节奏和思路&lt;/p&gt;

&lt;h3 id=&quot;阅读顺序&quot;&gt;阅读顺序&lt;/h3&gt;

&lt;p&gt;我读论文的顺序大体如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先看摘要（abstract），摘要可以概括一篇文章的主题和基本内容，许多文章只看摘要就可以判断是否值得读/是否是自己想要的。只读摘要不可，但摘要可以给人第一印象，需要好好读这部分。&lt;/p&gt;

    &lt;p&gt;如何判断是否是自己想要的文章？摘要（abstract）+介绍（introduction）+图+表格就可以基本了解了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其次看introduction部分，这部分主要介绍哪些技术难点和问题所在，以及简述自己方法的原理，如果你在选题，那么这部分讲完现阶段使用的方法之后、介绍自己方法之前的那部分内容，往往就是需要你来做的内容啦​,​做不做得出来另说:slightly_smiling_face:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;proposal这部分是文章核心，也是&lt;strong&gt;读懂论文的难点&lt;/strong&gt;所在，如果这篇论文很重要，那么一定要吃透文章的大部分原理，包括公式，虽然啃论文很苦涩，但是啃透了就会有种豁然开朗的话感觉。&lt;/li&gt;
  &lt;li&gt;实验这部分主要看一下实验方法和用到的数据集之类就可以，归纳主流的&lt;strong&gt;实验方法&lt;/strong&gt;和&lt;strong&gt;指标&lt;/strong&gt;。这样可以自己做实验的时候有一个指导&lt;/li&gt;
  &lt;li&gt;Conclusion就不说了&lt;/li&gt;
  &lt;li&gt;参考文献这部分，可以利用这部分探索其他值得读的文章，读了很多篇之后，就会知道哪一篇是高引文章了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;：总的来说，书读百遍，其意自现这话是有道理的，论文不用读那么多遍，和自己课题最相近的5-6篇啃透，同领域的和经典的25-40篇理解，整个领域及跨学科的了解就够了。&lt;/p&gt;

&lt;h3 id=&quot;精读与略读&quot;&gt;精读与略读&lt;/h3&gt;

&lt;p&gt;上面说的一般是我精读文章的步骤，但是很多文章，比如对于自己课题不是强相关、没有直接帮助、不是很新的，可以略读，具体方法是&lt;strong&gt;省略上述3，4，5部分&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;论文笔记&quot;&gt;论文笔记&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;一定一定一定要记笔记&lt;/strong&gt;，一篇好的论文读下来，要整理自己的思路、理解和想法，不然读了之后就会忘，一篇文章100分的营养，没有笔记可能只能吸取30分（当然我比较菜，记了笔记也不敢说能完全理解，但这绝对是一个好习惯），个人推荐电子笔记而不是直接在PDF做标注，这样能够时刻回顾、比较系统、可以构建自己的论文知识体系，并且放在博客网站上还能和别人讨论。&lt;/p&gt;

&lt;p&gt;记笔记&lt;strong&gt;不宜把全文翻译下来&lt;/strong&gt;，那样和重复造轮子没什么区别，连造轮子都算不上。不一定很多，但是要&lt;strong&gt;把自己的理解，读文章时的想法，遇到的难点记录下来&lt;/strong&gt;，这样才是有帮助的。论翻译，我是比不过Google和有道，也没必要做机器的活儿。&lt;/p&gt;

&lt;h2 id=&quot;如何加深理解&quot;&gt;如何加深理解&lt;/h2&gt;

&lt;p&gt;对论文中一些原理和公式理解不清，怎么都想不明白，完全正常，我读十篇论文九篇不明白的，那么怎么加深理解（弄明白）？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;PPT是个好东西&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;好处&lt;/strong&gt;：PPT更多使用描述性语言，生动的例子和图片，更能深入浅出（不带公式）地描述清楚原理。并且由于是作者自己做的，原汁原味，不会跑偏。&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;适用&lt;/strong&gt;：非常知名、高影响力的工作。很多工作是不会做PPT/做了也不大会公开，不好搜索&lt;/p&gt;

    &lt;p&gt;比如Fastern RCNN，直接搜索论文名称+PPT/slide就大概率可以得到了：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://jinluzhang.site/PublicPic/Pic/image-20200328171319497.png&quot; alt=&quot;image-20200328171319497&quot; style=&quot;zoom: 60%;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;博客是个好东西&lt;/p&gt;

    &lt;p&gt;首推作者本人的博客，上面可能有对论文更深的解释&lt;/p&gt;

    &lt;p&gt;其次中国的CSDN，掘金，知乎，国外的reddit,medium以及github issues等，不一一列举，有更好网站的同学请补充给我&lt;/p&gt;

    &lt;p&gt;后者社区型博客好就好在足够多的用户可以进行评论、交流&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;开源项目是个好东西&lt;/p&gt;

    &lt;p&gt;如果论文开源了，啥也不说，先跑通代码试试，说不定通过实验就理解了呢。有问题也可以通过github issues交流&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;论文作者是个好&lt;del&gt;东西&lt;/del&gt;人&lt;/p&gt;

    &lt;p&gt;大部分作者还是愿意分享自己的想法和成果的，毕竟都需要扩大工作的影响力，所以真不理解了/要源码/数据集，可以直接邮件，但不开源的要源码这事儿就看脸了，我是没成功过。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;脑子是个好东西&lt;/p&gt;

    &lt;p&gt;所有的方法归根到底，还是要靠自己，科研工作一定要有一个能&lt;strong&gt;独立思考&lt;/strong&gt;的脑子&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;祝大家人人有顶会，年年有顶刊！&lt;/p&gt;

&lt;p&gt;欢迎交流&lt;/p&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="research" /><summary type="html"></summary></entry><entry><title type="html">WIN10【Tensorflow-gpu+Anaconda3+cuda9.0+cudnn7.1】安装记录!</title><link href="http://localhost:4000/2020/03/11/tensorflow1.x-gpu-setup-in-win10.html" rel="alternate" type="text/html" title="WIN10【Tensorflow-gpu+Anaconda3+cuda9.0+cudnn7.1】安装记录!" /><published>2020-03-11T00:00:00+08:00</published><updated>2020-03-11T00:00:00+08:00</updated><id>http://localhost:4000/2020/03/11/tensorflow1.x-gpu-setup-in-win10</id><content type="html" xml:base="http://localhost:4000/2020/03/11/tensorflow1.x-gpu-setup-in-win10.html">&lt;p&gt;首先，版本问题一定要适配https://www.tensorflow.org/install/source_windows，我装的是tensorflow-gpu1.11.0，配套是
&lt;!--more--&gt;
&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image001-1575469940025.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CUDA&lt;/strong&gt;和&lt;strong&gt;CuDNN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CUDA是NVIDIA推出的运算平台，CuDNN是专门针对Deep Learning框架设计的一套GPU计算加速方案。在安装之前要查询下最新TensorFLow发行版支持到了哪个版本。&lt;/p&gt;

&lt;p&gt;1）显卡型号支持：https://developer.nvidia.com/cuda-gpus&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image002-1575469940025.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2）CUDA下载地址：https://developer.nvidia.com/cuda-toolkit-archive&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image003-1575469940026.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3）CuDNN下载地址：https://developer.nvidia.com/rdp/cudnn-download&lt;/p&gt;

&lt;p&gt;（下载CuDNN需要注册账号，注册过程比较简单）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image004-1575469940026.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TensorFlow&lt;/p&gt;

&lt;p&gt;TensorFlow的版本信息可以在Github，tensorflow中文社区以及pypi上查看。&lt;/p&gt;

&lt;p&gt;Github：https://github.com/tensorflow/tensorflow/releases&lt;/p&gt;

&lt;p&gt;tensorflow社区：https://tensorflow.google.cn/versions/&lt;/p&gt;

&lt;p&gt;pypi：https://pypi.org/project/tensorflow/#history&lt;/p&gt;

&lt;p&gt;TensorFlow可以直接在Anaconda Prompt的命令行中用指令：“conda install tensorflow-gpu”直接安装，并且该指令在安装TensorFlow时还会顺带把Cuda和CuDNN也给装了。考虑到conda 的软件包并没有官方支持，并且tensorflow和附带的Cuda和CuDNN版本都不是最新的，笔者未使用conda安装，而是使用原生的 pip 安装，安装过程见后文。&lt;/p&gt;

&lt;h2 id=&quot;第一步安装anaconda&quot;&gt;&lt;strong&gt;第一步：安装Anaconda&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;&lt;strong&gt;下载和安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下载地址：https://www.anaconda.com/download/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image005-1575469940026.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我系统是64位，所以下载 &lt;a href=&quot;https://repo.anaconda.com/archive/Anaconda3-5.2.0-Windows-x86_64.exe&quot;&gt;64-Bit Graphical Installer (631 MB)&lt;/a&gt;，之后就是进行安装了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image006-1575469940026.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;和安装其他软件没有什么区别，需要注意的是这一步，不要勾选**“Add Anaconda to my PATH enviroment variable”，我们后面会手动加入。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image007-1575469940026.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来就是等待了，安装结束后需要测试是否能正常使用，打开CMD输入“conda”命令，发现提示“’conda’ is not recognized as an internal or external command, operable program or batch file.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image008-1575469940026.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是由于我们没有配置环境变量的原因。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;&lt;strong&gt;配置&lt;/strong&gt;&lt;strong&gt;Anaconda&lt;/strong&gt;&lt;strong&gt;环境变量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们点击左下角搜索栏搜索“环境变量”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image009-1575469940026.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击环境变量&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image010.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择“Path”，点击“编辑”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image011.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将以下三个路径加入，注意这里要换成你自己的安装路径。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;G:\Anaconda\Anoconda3&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;G:\Anaconda\Anoconda3\Scripts&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;G:\Anaconda\Anoconda3\Library\bin&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;G:\Anaconda\Anoconda3\Library\mingw-w64\bin&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image012.png&quot; alt=&quot;G:\Anaconda\Anoconda3\Scripts &quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后点击“确定”保存，这回再测试一下，再cmd中输入“conda -V”，能正常显示版本号，证明已经配置好了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image013.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;来自 &amp;lt;&lt;a href=&quot;https://www.cnblogs.com/guoyaohua/p/9265268.html#第一步安装anaconda&quot;&gt;https://www.cnblogs.com/guoyaohua/p/9265268.html#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%AE%89%E8%A3%85anaconda&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;第二步安装tensorflow-gpu&quot;&gt;&lt;strong&gt;第二步：安装&lt;/strong&gt;&lt;strong&gt;TensorFlow-GPU&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;打开tensorflow官网：https://www.tensorflow.org/install/install_windows#installing_with_anaconda&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image014.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;跟着操作步骤走就可以了。&lt;/p&gt;

&lt;h3 id=&quot;1创建conda环境&quot;&gt;&lt;strong&gt;1.创建conda环境&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;通过调用下列命令，创建一个名为tfgpu的Conda环境：&lt;/p&gt;

&lt;p&gt;conda create -n tfgpu pip python=3.6&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image015.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;等待相应包的安装，如果国内网络太慢的话，可以为conda设置清华源，这样速度能快一点，具体配置过程，网上查一下吧，此处不再讲述。如果看到这样的提示，就证明conda环境创建成功。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image016.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2激活环境&quot;&gt;&lt;strong&gt;2.&lt;/strong&gt;激活环境&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;通过以下命令激活&lt;/strong&gt;&lt;strong&gt;conda&lt;/strong&gt;&lt;strong&gt;环境：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;activate tensorflow&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image017.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样就进入了刚创建的“tensorflow”环境。&lt;/p&gt;

&lt;h3 id=&quot;3安装tensorflow-gpu&quot;&gt;&lt;strong&gt;3.&lt;/strong&gt;安装tensorflow-gpu&lt;/h3&gt;

&lt;p&gt;安装GPU版本的tensorflow需要输入以下命令：&lt;/p&gt;

&lt;p&gt;pip install –ignore-installed –upgrade tensorflow-gpu&lt;/p&gt;

&lt;p&gt;如果只需要安装CPU版本的tensorflow则输入以下命令：&lt;/p&gt;

&lt;p&gt;pip install –ignore-installed –upgrade tensorflow&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image018.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样就安装成功了。&lt;/p&gt;

&lt;p&gt;注意：务必注意一点，在安装完&lt;strong&gt;tensroflow后，由于我们是新创建的conda环境，该环境中基本上是空的，有很多包和IDE并没有安装进来，例如“Ipython”，“spyder”此时如果我们在该环境下打开spyder/Ipyton/jupyter notebook等，会发现其实IDE使用的kernel并不是新建立的这个环境的kernel，而是“base”这个环境的，而“base”环境中我们并没有安装tensorflow，所以一定无法import。这也就是为什么有很多人在安装好tensorflow后仍然在IDE里无法正常使用的原因了。&lt;/strong&gt;**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;通过以下命令安装&lt;/strong&gt;Anaconda基础包&lt;/p&gt;

&lt;p&gt;conda install anaconda&lt;/p&gt;

&lt;p&gt;这回，我们测试一下是否能import tensorflow&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image019.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;程序报错，这是由于我们虽然安装好了tensorflow-gpu，但是还需要安装CUDA Toolkit 和 cuDNN。&lt;/p&gt;

&lt;h2 id=&quot;第三步安装cuda-toolkit--cudnn&quot;&gt;&lt;strong&gt;第三步：安装&lt;/strong&gt;CUDA Toolkit + cuDNN&lt;/h2&gt;

&lt;h3 id=&quot;1查看需要安装的cudacudnn版本&quot;&gt;&lt;strong&gt;1.&lt;/strong&gt;查看需要安装的CUDA+cuDNN版本&lt;/h3&gt;

&lt;p&gt;注意，tensorflow是在持续更新的，具体安装的CUDA和cuDNN版本需要去官网查看，要与最新版本的tensorflow匹配。&lt;/p&gt;

&lt;p&gt;点击查看最新tensorflow支持的CUDA版本：https://www.tensorflow.org/install/install_windows#requirements_to_run_tensorflow_with_gpu_support&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image020.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;现在（PS：此博客书写日期 2018年7月5日）最新版tensorflow支持的是 CUDA® Toolkit 9.0 + cuDNN v7.0，一定注意，安装的版本一定一定要正确，不要看NVIDIA官网推出CUDA® Toolkit 9.2了就感觉最新版的更好，而安装最新版，这样很可能会导致tensorflow无法正常使用，所以一定要跟着tensorflow 官网的提示来。&lt;/p&gt;

&lt;h3 id=&quot;2下载cuda--cudnn&quot;&gt;&lt;strong&gt;2.&lt;/strong&gt;下载CUDA + cuDNN&lt;/h3&gt;

&lt;p&gt;在这个网址查找CUDA已发布版本：https://developer.nvidia.com/cuda-toolkit-archive&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image021.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;进入下载界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image022.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下载好CUDA Toolkit 9.0 后，我们开始下载cuDnn 7.0，需要注意的是，下载cuDNN需要在nvidia上注册账号，使用邮箱注册就可以，免费的。登陆账号后才能下载。&lt;/p&gt;

&lt;p&gt;cuDNN历史版本在该网址下载：https://developer.nvidia.com/rdp/cudnn-archive&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image023.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image024.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样，我们就下载好了 CUDA Toolkit 9.0 和 cuDnn 7.0，下面我们开始安装。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image025.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3安装-cuda-toolkit-90-和-cudnn-70&quot;&gt;&lt;strong&gt;3.&lt;/strong&gt;安装 CUDA Toolkit 9.0 和 cuDnn 7.0&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;至关重要的一步：卸载显卡驱动&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于CUDA Toolkit需要在指定版本显卡驱动环境下才能正常使用的，所以如果我们已经安装了nvidia显卡驱动（很显然，大部分人都安装了），再安装CUDA Toolkit时，会因二者版本不兼容而导致CUDA无法正常使用，这也就是很多人安装失败的原因。而CUDA Toolkit安装包中自带与之匹配的显卡驱动，所以务必要删除电脑先前的显卡驱动。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image026.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image027.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此处选择“自定义（高级）”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image028.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;勾选所有&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image029.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一路通过即可。&lt;/p&gt;

&lt;p&gt;接下来，解压“cudnn-9.0-windows10-x64-v7.zip”，将一下三个文件夹，拷贝到CUDA安装的根目录下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image030.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样CUDA Toolkit 9.0 和 cuDnn 7.0就已经安装了，下面要进行环境变量的配置。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;配置环境变量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;将下面四个路径加入到环境变量中，注意要换成自己的安装路径。(此处最好放到anaconda环境变量下面)&lt;/p&gt;

&lt;p&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\bin&lt;/p&gt;

&lt;p&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\libnvvp&lt;/p&gt;

&lt;p&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0&lt;/p&gt;

&lt;p&gt;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.0\lib\x64&lt;/p&gt;

&lt;p&gt;到此，全部的安装步骤都已经完成，这回我们测试一下。&lt;/p&gt;

&lt;p&gt;安装完成后，打开cmd窗口，输入nvcc -V，查看CUDA是否正确安装。若正确安装，会出来下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;file:///C:/Users/KIMZHA~1/AppData/Local/Temp/msohtmlclip1/01/clip_image031.png&quot; alt=&quot;da compl ler driver  nvcc :  Copyright (https://jinluzhang.site/PublicPic/Pic/clip_image031.png) 2005—2017 WIDIA Corporation  Built on Fri_Sep_1 21:08:32_Centra1_Day1ight_Time_2017  Cuda compi lation tools, release 9. 0, V9. 0. 176 &quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第四步：测试&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.查看是否使用GPU&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tensorflow as tf
tf.test.gpu_device_name()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image032.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.查看在使用哪个GPU&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from tensorflow.python.client import device_lib
device_lib.list_local_devices()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/clip_image033.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好了大功告成！&lt;/p&gt;

&lt;p&gt;https://www.cnblogs.com/guoyaohua/p/9265268.html&lt;/p&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="configuration" /><summary type="html">首先，版本问题一定要适配https://www.tensorflow.org/install/source_windows，我装的是tensorflow-gpu1.11.0，配套是</summary></entry><entry><title type="html">Jekyll+云服务器搭建</title><link href="http://localhost:4000/2020/02/28/Jekyll-blog.html" rel="alternate" type="text/html" title="Jekyll+云服务器搭建" /><published>2020-02-28T00:00:00+08:00</published><updated>2020-02-28T00:00:00+08:00</updated><id>http://localhost:4000/2020/02/28/Jekyll-blog</id><content type="html" xml:base="http://localhost:4000/2020/02/28/Jekyll-blog.html">&lt;p&gt;&lt;em&gt;博客参考自：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;https://cloud.tencent.com/developer/article/1453573， https://segmentfault.com/a/1190000012560959&lt;/p&gt;

&lt;h2 id=&quot;需求&quot;&gt;需求&lt;/h2&gt;

&lt;p&gt;最近因为一些原因需要在自己租的云服务器上搭建Jekyll博客，&lt;!--more--&gt;由于之前都是在GitHub Pages上搭建的，其实在服务器这一块只需要&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;上去就行了，现在多了一步如何在服务器上启动jekyll，因为看不少教程都没有说清楚这一步，所以写个博客记录一下，顺便梳理一下自己搭建博客的历程。&lt;/p&gt;

&lt;p&gt;下面以Jekyll模板+阿里云轻量服务器CentOS7.3为例，进行说明&lt;/p&gt;

&lt;h2 id=&quot;jekyllgithub-pages&quot;&gt;Jekyll+Github Pages&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;需要了解一下Jekyll的基础知识：http://jekyllcn.com/docs/home/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;然后需要建立一个你的仓库，命名为username.github.io即可，然后开启Github Pages功能，如图：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/image-20200225144538660.png&quot; alt=&quot;img-github-page&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;选一个喜欢的Jekyll模板，GitHub提供了几个，点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Change theme&lt;/code&gt;即可看到，觉得不喜欢还可以自己去找：http://jekyllthemes.org/， 选中之后去他的github仓库，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt;下来，放进自己刚才创建的仓库，第一次搭建建议找一个README文档说明详细的，方便修改博客的各种属性，我选择的是&lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme&quot;&gt;Text Theme&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;本地调试需要搭建一个Ruby+bundle+jekyll的环境，参考http://jekyllcn.com/docs/installation/，对于ubuntu/centos用户，使用apt/yum等包管理安装的ruby版本可能不对，参考这里安装rubyhttps://segmentfault.com/a/1190000012560959&lt;/li&gt;
  &lt;li&gt;配置好之后，在博客文件夹下使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;即可在本地浏览器调试、预览。&lt;/li&gt;
  &lt;li&gt;先读模板的代码，对应修改一些属性，这是我修改之后的模板&lt;a href=&quot;https://github.com/JinluZhang1126/jinluzhang1126.github.io/tree/template&quot;&gt;Jinlu Zhang&lt;/a&gt;，对一些不明确的属性加了注释，然后还对模板根据喜好做了些修改，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt;我这个也可以。&lt;/li&gt;
  &lt;li&gt;最终把自己满意的版本push到github仓库，他就可以自己部署了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;云服务器部署&quot;&gt;云服务器部署&lt;/h2&gt;

&lt;h3 id=&quot;环境搭建&quot;&gt;环境搭建&lt;/h3&gt;

&lt;p&gt;在云服务器上部署其实和本地调试区别不大，主要在于ruby版本和后续安装要正确，安装姿势也要对，&lt;strong&gt;切记不要直接&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo yum install ruby&lt;/code&gt;,安装版本可能太老&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;（&lt;strong&gt;推荐&lt;/strong&gt;）rvm安装&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;源码编译：https://www.ruby-lang.org/en/documentation/installation/#building-from-source&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以使用rvm配置为例：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装rvm&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; hkp://keys.gnupg.net &lt;span class=&quot;nt&quot;&gt;--recv-keys&lt;/span&gt; 409B6B1796C275462A1703113804BB82D39DC0E3
curl &lt;span class=&quot;nt&quot;&gt;-sSL&lt;/span&gt; https://get.rvm.io | bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; stable
   
&lt;span class=&quot;c&quot;&gt;# 如果上面的连接失败，可以尝试: &lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer | bash &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;可能会问你 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; 管理员密码，以及自动通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Homebrew&lt;/code&gt; 安装依赖包，等待一段时间后就可以成功安装好 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVM&lt;/code&gt;。&lt;/p&gt;

    &lt;p&gt;然后，载入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RVM&lt;/code&gt; 环境（新开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Termal&lt;/code&gt; 就不用这么做了，会自动重新载入的）&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /usr/local/rvm/scripts/rvm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器，这样能提高安装速度&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ruby_url=https://cache.ruby-china.org/pub/ruby&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /usr/local/rvm/user/db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;检查一下是否安装正确&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
   
rvm 1.29.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;latest&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; by Michal Papis, Piotr Kuczynski, Wayne E. Seguin &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;https://rvm.io]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用rvm安装ruby&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm requirements
rvm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;2.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;设置 Ruby 版本,同样，也可以用其他版本号，前提是你有用 rvm install 安装过那个版本&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rvm use 2.7.0 &lt;span class=&quot;nt&quot;&gt;--default&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;测试&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
ruby 2.3.0p0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2015-12-25 revision 53290&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-linux]
   
gem &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
2.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装bundler&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;转到服务器上存放博客的路径下，启动jekyll服务&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;这样启动的服务在你关闭命令行后就会停止，而我们在服务器的服务不可能保存命令行连接，因此需要修改为：&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; 0.0.0.0 &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; 80 &lt;span class=&quot;nt&quot;&gt;--detach&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;当你想要停止服务时，可以使用以下命令：&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;pkill&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;或者&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;jekyll
   
&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-9&lt;/span&gt; jekyll服务进程编号
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;nginx端口分发&quot;&gt;nginx端口分发&lt;/h3&gt;

&lt;p&gt;服务器上不可能只运行一个博客，但是80端口只有一个&lt;/p&gt;

&lt;p&gt;在启动Jekyll服务时，使用的命令：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detach&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中-P指定的就是启动时的端口，你可以修改为任意你服务器开放了的端口，如：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;H&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8899&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;detach&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，你就将Jekyll服务启动在了8899端口下，那么问题来了，刚才说的只能访问80端口呢！不急。&lt;/p&gt;

&lt;p&gt;我们在购买域名后，可以设置子域名。&lt;/p&gt;

&lt;p&gt;1.首先去域名购买网站的控制台，在解析记录中，添加你想使用的子域名,同样解析指向你的服务器，如：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;yuming&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.在服务器上安装nginx。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$sudo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nginx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.启动nginx&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$sudo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nginx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.修改nginx配置文件&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;etc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nginx&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;vi&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 http 后的大括号内添加图片内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jinluzhang.site/PublicPic/Pic/image-20200228103323218.png&quot; alt=&quot;image-20200228103323218&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中&lt;/p&gt;

&lt;p&gt;liston：80。想要监听的端口 server_name:blog.yuming.com。为你设置的子域名 location 后面的 http://localhost:8899。为你启动的Jekyll端口。&lt;/p&gt;

&lt;p&gt;5.重新nginx&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nginx&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;restart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在浏览器访问你的子域名即可跳转至你的博客。&lt;/p&gt;</content><author><name>Jinlu Zhang</name><email>Jinluzhang1126@163.com</email></author><category term="configuration" /><summary type="html">博客参考自： https://cloud.tencent.com/developer/article/1453573， https://segmentfault.com/a/1190000012560959 需求 最近因为一些原因需要在自己租的云服务器上搭建Jekyll博客，</summary></entry></feed>